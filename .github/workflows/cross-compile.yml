name: Cross-Compile and Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - main

env:
  AWS_REGION : eu-west-2 #Change to reflect your Region
  TF_LOG: INFO
  AWS_SAM_LOCAL : true

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: write    # This is required for actions/checkout

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Go environment
        uses: actions/setup-go@v2
        with:
          go-version: '1.21.1'

      - name: Run Go Tests
        run: go test -race -covermode=atomic -coverprofile=coverage.out

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Create Build Directory
        run: mkdir -p build

      - name: Cross-Compile for Windows, macOS, and Linux
        run: |
          env GOOS=windows GOARCH=amd64 go build -o ./build/udd-windows-amd64.exe
          env GOOS=darwin GOARCH=amd64 go build -o ./build/udd-darwin-amd64
          env GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go build -a -ldflags '-linkmode external -extldflags "-static"' -o ./build/udd-linux-amd64

      - name: Tar build directory
        run: tar -czvf build.tar.gz -C build .

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: compiled-binaries
          path: build.tar.gz

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: integration_test
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Build Artifacts
        uses: actions/download-artifact@v2
        with:
          name: compiled-binaries
          path: ./downloaded

      - name: Create build directory
        run: mkdir -p ./build

      - name: Untar build directory
        run: tar -xzvf ./downloaded/build.tar.gz -C ./build

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/udd-windows-amd64.exe
          asset_name: udd-windows-amd64.exe
          asset_content_type: application/octet-stream

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/udd-darwin-amd64
          asset_name: udd-darwin-amd64
          asset_content_type: application/octet-stream

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/udd-linux-amd64
          asset_name: udd-linux-amd64
          asset_content_type: application/octet-stream

  integration_test_setup:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    outputs:
      instance_id: ${{ steps.create_ec2.outputs.instance_id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::276447169330:role/test.userdata-decoder-3000.andrewrea.co.uk
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Create EC2 instance
        id: create_ec2
        run: |
          INSTANCE_ID=$(aws ec2 run-instances --region eu-west-2 --image-id ami-018ff7b635dfd082c --instance-type t3.micro --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=UserData3000TestInstance}]'  --query 'Instances[0].InstanceId' --output text)
          echo "Fetched Instance ID: $INSTANCE_ID"
          echo "instance_id=$INSTANCE_ID"  >> "$GITHUB_OUTPUT"

  integration_test:
    if: github.ref == 'refs/heads/main'
    needs:
      - integration_test_setup
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, macos-latest, ubuntu-latest ]
        include:
          - os: windows-latest
            executable: ./build/udd-windows-amd64.exe
          - os: macos-latest
            executable: ./build/udd-darwin-amd64
          - os: ubuntu-latest
            executable: ./build/udd-linux-amd64
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::276447169330:role/test.userdata-decoder-3000.andrewrea.co.uk
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
      - name: Download Build Artifacts
        uses: actions/download-artifact@v2
        with:
          name: compiled-binaries
          path: ./downloaded

      - name: Create build directory
        run: mkdir -p ./build

      - name: Untar build directory
        run: tar -xzvf ./downloaded/build.tar.gz -C ./build

      - name: Test Application
        run: ${{ matrix.executable }} --provider aws --output-dir ./output/${{ matrix.os }}/
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: compiled-binaries
          path: ./output/

  teardown:
    if: always()
    needs:
     - integration_test
     - integration_test_setup
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::276447169330:role/test.userdata-decoder-3000.andrewrea.co.uk
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Teardown EC2 instance
        run: aws ec2 terminate-instances --instance-ids ${{ needs.integration_test_setup.outputs.instance_id }}
        # Make sure AWS CLI is configured appropriately in the runner

  update-latest-release:
    if: github.ref == 'refs/heads/main'
    needs:
      - integration_test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create build directory
        run: mkdir -p ./build

      - name: Download Build Artifacts
        uses: actions/download-artifact@v2
        with:
          name: compiled-binaries
          path: ./downloaded

      - name: Untar build directory
        run: tar -xzvf ./downloaded/build.tar.gz -C ./build

      - name: Install GitHub CLI
        run: sudo apt install gh

      - name: Check if release exists
        id: check_release
        continue-on-error: true
        run: |
          RELEASE_URL=$(gh release view latest --json url -q '.url') || true
          if [[ -n "$RELEASE_URL" ]]; then
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
            echo "RELEASE_URL=$RELEASE_URL" >> $GITHUB_ENV
          else
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Remove existing assets
        if: env.RELEASE_EXISTS == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ASSET_IDS=$(gh api -X GET $RELEASE_URL/assets -q '.[].id' ||:)
          for id in $ASSET_IDS; do
            gh api -X DELETE /repos/:owner/:repo/releases/assets/$id
          done

      - name: Upload new assets to latest release
        if: env.RELEASE_EXISTS_FOR_UPLOAD == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload latest ./build/* --clobber



  update_dev_release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'  # Only run on the main branch

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Required for 'git describe' to work

      - name: Download Build Artifacts
        uses: actions/download-artifact@v2
        with:
          name: compiled-binaries
          path: ./downloaded

      - name: Create build directory
        run: mkdir -p ./build

      - name: Untar build directory
        run: tar -xzvf ./downloaded/build.tar.gz -C ./build


      - name: Get version from git describe
        id: git_describe
        run: echo "GIT_DESCRIBE_VERSION=$(git describe --tags)" >> $GITHUB_ENV

      - name: Delete existing 'development' release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true  # Continue if this fails (i.e., the release doesn't exist)
        run: gh release delete development --yes

      - name: Create new 'development' release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create development ./build/* \
          --title "Development Release: ${{ env.GIT_DESCRIBE_VERSION }}" \
          --notes "Auto-generated development release"